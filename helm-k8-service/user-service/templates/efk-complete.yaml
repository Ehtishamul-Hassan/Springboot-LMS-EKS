# -------------------------
# Namespace
# -------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}

---

# -------------------------
# StorageClass (manual)
# -------------------------
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Values.storageClass.name }}
provisioner: {{ .Values.storageClass.provisioner }}
volumeBindingMode: {{ .Values.storageClass.volumeBindingMode }}

---

# -------------------------
# PersistentVolumes for Elasticsearch
# -------------------------
{{- range $i, $pv := .Values.persistentVolumes }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ $pv.name }}
spec:
  capacity:
    storage: {{ $pv.size }}
  accessModes:
    - {{ $pv.accessMode }}
  hostPath:
    path: {{ $pv.path }}
  storageClassName: {{ $.Values.storageClass.name }}
---
{{- end }}

# -------------------------
# Elasticsearch StatefulSet + Service
# -------------------------
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.elasticsearch.service.name }}
  namespace: {{ .Values.namespace }}
spec:
  clusterIP: None
  ports:
    - port: {{ .Values.elasticsearch.service.ports.http }}
      name: http
    - port: {{ .Values.elasticsearch.service.ports.transport }}
      name: transport
  selector:
    app: {{ .Values.elasticsearch.appLabel }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.elasticsearch.name }}
  namespace: {{ .Values.namespace }}
spec:
  serviceName: "{{ .Values.elasticsearch.name }}"
  replicas: {{ .Values.elasticsearch.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.elasticsearch.appLabel }}
  template:
    metadata:
      labels:
        app: {{ .Values.elasticsearch.appLabel }}
    spec:
      containers:
        - name: elasticsearch
          image: {{ .Values.elasticsearch.image }}
          ports:
            - containerPort: {{ .Values.elasticsearch.service.ports.http }}
            - containerPort: {{ .Values.elasticsearch.service.ports.transport }}
          env:
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "{{ .Values.elasticsearch.security.enabled }}"
          resources:
            requests:
              memory: {{ .Values.elasticsearch.resources.requests.memory }}
              cpu: {{ .Values.elasticsearch.resources.requests.cpu }}
            limits:
              memory: {{ .Values.elasticsearch.resources.limits.memory }}
          volumeMounts:
            - name: es-data
              mountPath: /usr/share/elasticsearch/data
      initContainers:
        - name: create-directories
          image: busybox
          command:
            [
              "sh",
              "-c",
              "mkdir -p /usr/share/elasticsearch/data && chown -R 1000:1000 /usr/share/elasticsearch/data",
            ]
          securityContext:
            privileged: true
          volumeMounts:
            - name: es-data
              mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
    - metadata:
        name: es-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.elasticsearch.pvSize }}
        storageClassName: {{ $.Values.storageClass.name }}

---

# -------------------------
# Fluent Bit RBAC + ConfigMap + DaemonSet
# -------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: {{ .Values.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
rules:
  - apiGroups: [""]
    resources: ["*"]
    verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit
roleRef:
  kind: ClusterRole
  name: fluent-bit
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: fluent-bit
    namespace: {{ .Values.namespace }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: {{ .Values.namespace }}
data:
  parsers.conf: |
    {{ .Values.fluentbit.parserConf | default "" | nindent 4 }}

  fluent-bit.conf: |
    {{ .Values.fluentbit.mainConf | default "" | nindent 4 }}


---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
    spec:
      serviceAccountName: fluent-bit
      containers:
        - name: fluent-bit
          image: {{ .Values.fluentbit.image }}
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc/
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config
            items:
              - key: fluent-bit.conf
                path: fluent-bit.conf
              - key: parsers.conf
                path: parsers.conf

---

# -------------------------
# Kibana Deployment + Service + Ingress
# -------------------------
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: {{ .Values.namespace }}
spec:
  type: {{ .Values.kibana.serviceType }}
  ports:
    - port: {{ .Values.kibana.port }}
      targetPort: {{ .Values.kibana.port }}
      nodePort: {{ .Values.kibana.nodePort }}
  selector:
    app: kibana

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.kibana.replicas }}
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: {{ .Values.kibana.image }}
          ports:
            - containerPort: {{ .Values.kibana.port }}
          env:
            - name: ELASTICSEARCH_HOSTS
              value: "http://{{ .Values.elasticsearch.service.name }}:{{ .Values.elasticsearch.service.ports.http }}"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kibana
                port:
                  number: {{ .Values.kibana.port }}


